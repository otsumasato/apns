name: apns-every-15min

on:
  schedule:
    - cron: "*/15 * * * *"   # 15分ごと（UTC）※日本時間でも5分おきに動きます
  workflow_dispatch: {}

concurrency:
  group: apns-every-5min
  cancel-in-progress: true

jobs:
  send:
    runs-on: ubuntu-latest

    env:
      TEAM_ID:   ${{ secrets.APNS_TEAM_ID }}
      KEY_ID:    ${{ secrets.APNS_KEY_ID }}
      TOPIC:     ${{ secrets.APNS_TOPIC }}
      TOKENS:    ${{ secrets.DEVICE_TOKENS }}     # カンマ区切りOK
      APNS_ENV:  ${{ secrets.APNS_ENV || 'sandbox' }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install deps
        run: |
          set -euo pipefail
          python -V
          pip install "PyJWT>=2.8" "cryptography>=42"
    # ── .p8 を生成（PEM/BASE64 どちらにも対応） ─────────────────────────────
      - name: Create APNs key file (accepts PEM or Base64)
        shell: bash
        env:
          KEY_PEM: ${{ secrets.APN_SECRETS }}       # PEMを貼った場合（BEGIN/END含む複数行）
          KEY_B64: ${{ secrets.APNS_P8_BASE64 }}    # Base64 1行を貼った場合
        run: |
          set -euo pipefail
          umask 077

          if [ -n "${KEY_PEM:-}" ]; then
            printf '%s\n' "$KEY_PEM" > apns_key.p8
          elif [ -n "${KEY_B64:-}" ]; then
            echo "$KEY_B64" | tr -d '\n' | base64 -d > apns_key.p8
          else
            echo "❌ No APNs key provided (set APN_SECRETS or APNS_P8_BASE64)"; exit 1
          fi

          # CRLF対策 & 健全性チェック
          sed -i 's/\r$//' apns_key.p8
          echo "apns_key.p8 size: $(wc -c < apns_key.p8) bytes"
          head -n 2 apns_key.p8 || true
          openssl pkey -in apns_key.p8 -noout > /dev/null || { echo "❌ Could not read key"; exit 1; }
          echo "✅ APNs key OK"

      # ── JWTを作成 ─────────────────────────────────────────────────────────────
      - name: Build JWT
        id: jwt
        shell: bash
        run: |
          set -euo pipefail
          JWT=$(python - <<'PY'
          import os, time, jwt
          from cryptography.hazmat.primitives import serialization

          with open("apns_key.p8","rb") as f:
              priv = serialization.load_pem_private_key(f.read(), password=None)

          token = jwt.encode(
              {"iss": os.environ["TEAM_ID"], "iat": int(time.time())},
              priv, algorithm="ES256",
              headers={"kid": os.environ["KEY_ID"]}
          )
          print(token)
          PY
          )
          echo "token=$JWT" >> "$GITHUB_OUTPUT"

    # ── APNs送信（HTTP/2） ───────────────────────────────────────────────────
      - name: Send to each device (HTTP/2 curl)
        shell: bash
        run: |
          set -euo pipefail

          HOST="https://api.sandbox.push.apple.com"
          if [ "${APNS_ENV}" = "production" ]; then
            HOST="https://api.push.apple.com"
          fi

          IFS=',' read -ra TOK_ARR <<< "$TOKENS"
          COLLAPSE_ID="ble-ping"                               # 連投はcoalesce
          EXPIRATION=$(date -u -d '+4 minutes' +%s)            # 遅延対策で4分後に期限切れ
          set -e
          HOST="https://api.sandbox.push.apple.com"
          [ "${APNS_ENV}" = "production" ] && HOST="https://api.push.apple.com"

          IFS=',' read -ra A <<< "$TOKENS"
          ok=1
          for t in "${A[@]}"; do
            t=$(echo "$t" | xargs)    # trim
            [ -z "$t" ] && continue

            code=$(curl --http2 -sS -o /dev/null -w "%{http_code}" \
              -H "authorization: bearer ${{ steps.jwt.outputs.token }}" \
              -H "apns-topic: ${TOPIC}" \
              -H "apns-push-type: background" \
              -H "apns-priority: 5" \
              -d '{"aps":{"content-available":1}}' \
              "${HOST}/3/device/${t}")

            echo "${t:0:12}… => HTTP ${code}"
            if [ "$code" != "200" ] && [ "$code" != "204" ]; then ok=0; fi
          done

          [ $ok -eq 1 ]
          for RAW in "${TOK_ARR[@]}"; do
            TOKEN="$(echo "$RAW" | xargs)"   # trim
            [ -z "$TOKEN" ] && continue

            SENT_AT=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            RESP=$(
              curl --http2 -sS -i -w "\n%{http_code}" \
                -H "authorization: bearer ${{ steps.jwt.outputs.token }}" \
                -H "apns-topic: ${TOPIC}" \
                -H "apns-push-type: background" \
                -H "apns-priority: 5" \
                -H "apns-collapse-id: ${COLLAPSE_ID}" \
                -H "apns-expiration: ${EXPIRATION}" \
                -d "{\"aps\":{\"content-available\":1},\"ts\":\"${SENT_AT}\"}" \
                "${HOST}/3/device/${TOKEN}"
            )

            CODE=$(echo "$RESP" | tail -n1)
            echo "=== Sent at: ${SENT_AT} -> HTTP $CODE ==="
            echo "----- Response (headers+body) -----"
            echo "$RESP" | sed '$d'
            echo "-----------------------------------"

            if [ "$CODE" != "200" ] && [ "$CODE" != "204" ]; then
              echo "❌ Failed for token: ${TOKEN:0:12}… (HTTP $CODE)"
              exit 1
            fi
          done

          echo "✅ All pushes sent"
