name: apns-cron
on:
  # ÊâãÂãïÂÆüË°åÔºàActions „Å´ Run workflow „Éú„Çø„É≥„ÅåÂá∫„Åæ„ÅôÔºâ
  workflow_dispatch:
    inputs:
      device_token:
        description: "Override device token (optional)"
        required: false
      env:
        description: "APNs environment"
        type: choice
        options: [sandbox, production]
        default: sandbox
  # 5ÂàÜ„Åî„Å®„Å´Ëá™ÂãïÂÆüË°å
  schedule:
    - cron: "*/5 * * * *"   # UTC„Åß5ÂàÜ„Åä„Åç

jobs:
  send:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install deps (JWT only)
        run: |
          python -V
          pip install "PyJWT>=2.8" "cryptography>=42"

      # ‚úÖ Secrets „Åå"Â≠òÂú®„Åô„Çã„Åã„Å†„Åë"„ÇíÁ¢∫Ë™çÔºà‰∏≠Ë∫´„ÅØË°®Á§∫„Åó„Å™„ÅÑÔºâ
      - name: Check secrets presence (no values printed)
        shell: bash
        env:
          S_TEAM: ${{ secrets.APNS_TEAM_ID }}
          S_KEY: ${{ secrets.APNS_KEY_ID }}
          S_PEM: ${{ secrets.APNS_P8_PEM || secrets.APN_SECRETS }}
          S_TOPIC: ${{ secrets.APNS_TOPIC }}
          S_DEVS: ${{ secrets.DEVICE_TOKENS }}
        run: |
          for v in S_TEAM S_KEY S_PEM S_TOPIC; do
            if [ -z "${!v}" ]; then echo "‚ùå $v is EMPTY"; exit 1; else echo "‚úÖ $v is set"; fi
          done
          if [ -z "${S_DEVS}" ]; then echo "‚ÑπÔ∏è DEVICE_TOKENS is empty (you can input device_token at runtime)"; else echo "‚úÖ DEVICE_TOKENS is set"; fi

      # üîê JWT „Çí‰ΩúÊàê
      - name: Build JWT (robust key loader)
        id: jwt
        shell: python
        env:
          APNS_TEAM_ID: ${{ secrets.APNS_TEAM_ID }}
          APNS_KEY_ID: ${{ secrets.APNS_KEY_ID }}
          APNS_P8_PEM: ${{ secrets.APNS_P8_PEM }}
          APN_SECRETS: ${{ secrets.APN_SECRETS }}
        run: |
          import os
          import time
          import base64
          import re
          import jwt
          from cryptography.hazmat.primitives import serialization
          
          TEAM_ID = os.environ["APNS_TEAM_ID"].strip()
          KEY_ID = os.environ["APNS_KEY_ID"].strip()
          S = os.environ.get("APNS_P8_PEM") or os.environ.get("APN_SECRETS") or ""
          
          def load_key(s):
              s = s.strip().strip('`"\'')
              # \n ÊñáÂ≠óÂàó ‚Üí ÂÆüÊîπË°å
              if "\\n" in s and "BEGIN" in s:
                  try:
                      return serialization.load_pem_private_key(s.replace("\\n","\n").encode(), None)
                  except Exception:
                      pass
              # PEM „Åù„ÅÆ„Åæ„Åæ
              if "BEGIN PRIVATE KEY" in s:
                  return serialization.load_pem_private_key(s.encode(), None)
              # Base64/URL-safe „ÇíË©¶„ÅôÔºà„Éë„Éá„Ç£„É≥„Ç∞Ë£úÊ≠£Ôºâ
              compact = re.sub(r"\s+", "", s)
              pad = "=" * ((4 - len(compact) % 4) % 4)
              try:
                  b = base64.b64decode(compact + pad, validate=False)
              except Exception:
                  from base64 import urlsafe_b64decode
                  b = urlsafe_b64decode(compact + pad)
              # „Éá„Ç≥„Éº„ÉâÁµêÊûú„Åå PEM „ÉÜ„Ç≠„Çπ„Éà„Å™„Çâ PEM „Å®„Åó„Å¶„ÄÅ„Åù„ÅÜ„Åß„Å™„Åë„Çå„Å∞ DER „Å®„Åó„Å¶Ë™≠„ÇÄ
              if b.startswith(b"-----BEGIN"):
                  return serialization.load_pem_private_key(b, None)
              return serialization.load_der_private_key(b, None)
          
          key = load_key(S)
          token = jwt.encode({"iss": TEAM_ID, "iat": int(time.time())},
                             key, algorithm="ES256", headers={"kid": KEY_ID})
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"token={token}\n")

      # üöÄ APNs „Å∏ HTTP/2 „ÅßÈÄÅ‰ø°Ôºàcurl ‰ΩøÁî®Ôºâ
      - name: Send APNs via HTTP/2 (curl)
        shell: bash
        env:
          JWT: ${{ steps.jwt.outputs.token }}
          APNS_TOPIC: ${{ secrets.APNS_TOPIC }}
          DEFAULT_TOKEN: ${{ secrets.DEVICE_TOKENS || vars.DEVICE_TOKENS }}
          DEFAULT_ENV: ${{ secrets.APNS_ENV || vars.APNS_ENV }}
          INPUT_TOKEN: ${{ inputs.device_token }}
          INPUT_ENV: ${{ inputs.env }}
        run: |
          set -euo pipefail
          echo "curl version:"; curl -V
          
          # „Éà„Éº„ÇØ„É≥ÔºöÂÖ•Âäõ > Secrets/Vars„ÄÇÁ©∫ÁôΩ/ÊîπË°åÈô§Âéª„ÄÅ„Ç´„É≥„ÉûÂå∫Âàá„Çä„Å™„ÇâÂÖàÈ†≠„Çí‰ΩøÁî®
          RAW="${INPUT_TOKEN:-${DEFAULT_TOKEN:-}}"
          RAW="${RAW//$'\r'/}"; RAW="${RAW//$'\n'/}"
          RAW="$(echo -n "$RAW" | tr -d '[:space:]')"
          TOKEN="${RAW%%,*}"
          if [ -z "${TOKEN:-}" ]; then
            echo "‚ùå device_token „ÅåÊú™Ë®≠ÂÆöÔºàÂÆüË°åÊôÇÂÖ•Âäõ or DEVICE_TOKENS „ÇíË®≠ÂÆöÔºâ"; exit 1;
          fi
          
          ENV="${INPUT_ENV:-${DEFAULT_ENV:-sandbox}}"
          if [ "${ENV}" = "production" ]; then
            HOST="https://api.push.apple.com"
          else
            HOST="https://api.sandbox.push.apple.com"
          fi
          
          TICK_UTC=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "{\"aps\":{\"content-available\":1},\"tick\":\"${TICK_UTC}\"}" > body.json
          
          echo "ENV=${ENV}  TOKEN(head)=${TOKEN:0:12}‚Ä¶  tick=${TICK_UTC}"
          
          set -x
          curl --http2 -sS -D headers.txt \
            -H "authorization: bearer ${JWT}" \
            -H "apns-topic: ${APNS_TOPIC}" \
            -H "apns-push-type: background" \
            -H "apns-priority: 5" \
            -d @body.json \
            "${HOST}/3/device/${TOKEN}" \
            -o response.json
          set +x
          
          echo "=== Response Headers ==="
          cat headers.txt || true
          echo "=== Response Body ==="
          cat response.json || true
          echo ""
          
          # Check HTTP status
          STATUS=$(grep -E "^HTTP/2" headers.txt | awk '{print $2}')
          if [ "$STATUS" = "200" ] || [ "$STATUS" = "204" ]; then
            echo "‚úÖ Silent push sent successfully!"
          else
            echo "‚ùå Failed: HTTP $STATUS"
            exit 1
          fi
